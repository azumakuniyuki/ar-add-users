#!/usr/bin/env perl
=head1 DESCRIPTION
    Generate shadow password string 

=head1 USAGE
    Try --help option
=cut

#   ____ _     ___ 
#  / ___| |   |_ _|
# | |   | |    | | 
# | |___| |___ | | 
#  \____|_____|___|
#                  
package CLI;
use strict;
use warnings;
use IO::File;
use Fcntl qw(:flock);
use File::Basename qw/basename/;

sub new {
    my $class = shift;
    my $argvs = { @_ };
    my $param = {};
    my $thing = undef;

    return $class if ref $class eq __PACKAGE__;
    $param = {
        'verbose' => $argvs->{'verbose'} || 0,
        'command' => $argvs->{'command'} ? $argvs->{'command'} : $0,
        'runmode' => $argvs->{'runmode'} || 1,
        'stream' => {
            'stdin'  => -t STDIN  ? 1 : 0,
            'stdout' => -t STDOUT ? 1 : 0,
            'stderr' => -t STDERR ? 1 : 0,
        },
    };
    $thing = bless $param, __PACKAGE__;
    return $thing;
}

sub stdin  { shift->{'stream'}->{'stdin'}  }
sub stdout { shift->{'stream'}->{'stdout'} }
sub stderr { shift->{'stream'}->{'stderr'} }
sub r { my( $x, $y ) = @_; $x->{'runmode'} = $y if defined $y; return $x->{'runmode'}; }
sub v { my( $x, $y ) = @_; $x->{'verbose'} = $y if defined $y; return $x->{'verbose'}; }

sub e {
    # @Description  Print error message and exit
    # @Param <mesg> (String) Error message text
    # @Param <bool> (Boolean) continue or not
    # @Return       1 or exit(1)
    my $self = shift;
    my $mesg = shift; return 0 unless length $mesg;
    my $cont = shift || 0;

    $self->l( $mesg, 'e' ) if $self->{'syslog'}->{'enabled'};
    printf( STDERR " * error0: %s\n", $mesg ) if $self->stderr;
    printf( STDERR " * error0: ******** ABORT ********\n" ) if $self->stderr;
    $cont ? return 1 : exit(1);
}

sub p {
    # @Description  Print debug message
    # @Param <mesg> (String) Debug message text
    # @Param <level>(Integer) Debug level
    # @Return       0 or 1
    my $self = shift;
    my $mesg = shift; return 0 unless length $mesg;
    my $rung = shift || 1;

    return 0 unless $self->stderr;
    return 0 unless $self->v;
    return 0 unless $self->v >= $rung;

    chomp $mesg; printf( STDERR " * debug%d: %s\n", $rung, $mesg );
    return 1;
}

1;

#                  _       
#  _ __ ___   __ _(_)_ __  
# | '_ ` _ \ / _` | | '_ \ 
# | | | | | | (_| | | | | |
# |_| |_| |_|\__,_|_|_| |_|
#                          
package main;
use strict;
use warnings;

BEGIN {
    if( @ARGV ) {
        if( $ARGV[0] eq '--modules' ) {
            require IO::File;
            my $filehandle = IO::File->new( $0, 'r' ) || die $!;
            my $modulelist = [];
            my $modulename = '';

            while( ! $filehandle->eof ) {
                my $r = $filehandle->getline;
                next if $r =~ /\A\s*#/;
                next if $r =~ /\A=/;
                next if $r =~ /\A\s*\z/;
                next if $r =~ /\buse (?:strict|warnings|utf8)/;

                $modulename = $1 if $r =~ m{\b(?:use|require)[ ]+([A-Za-z][0-9A-Za-z:]+)[ ;]};

                next unless $modulename;
                next if grep { $modulename eq $_ } @$modulelist;
                push @$modulelist, $modulename; $modulename = q();
            }
            $filehandle->close;
            printf( "%s\n", $_ ) for @$modulelist;
            exit 0;

        } elsif( $ARGV[0] eq '--cpanm' ) {
            my $commandurl = 'http://xrl.us/cpanm';
            my $searchpath = [ '/usr/local/bin/', '/usr/bin/', '/bin/', './' ];
            my $commandset = { 'wget' => '-c', 'curl' => '-LOk' };
            my $scriptpath = qx/which cpanm/; chomp $scriptpath;
            my $getcommand = q();

            if( -x $scriptpath ) {
                printf "%s\n", $scriptpath;
                exit 0;
            }

            foreach my $e ( keys %$commandset ) {
                $getcommand   = qx/which $e/; chomp $getcommand;
                $getcommand   = q() unless -x $getcommand;
                $getcommand ||= shift @{ [ grep { $_ .= $e; $_ if -x $_ } @$searchpath ] };
                next unless $getcommand;

                $getcommand .= ' '.$commandset->{ $e };
                last;
            }

            $scriptpath = './cpanm';
            if( -f $scriptpath ) {
                chmod( '0755', $scriptpath );
                printf( "%s\n", $scriptpath ); 
                exit 0;
            }
            system qq($getcommand $commandurl > /dev/null 2>&1);
            chmod( '0755', $scriptpath ) if -x $scriptpath;
            printf "%s\n", $scriptpath;
            exit 0;
        }
    }
}

use Getopt::Long qw/:config posix_default no_ignore_case bundling auto_help/;
use File::Basename qw/basename/;
use Crypt::Passwd::XS;

my $Version = '0.0.3';
my $Setting = {};
my $Default = {};
my $Options = {
    'exec' => ( 1 << 0 ),
};
my $Command = CLI->new( 'command' => join( ' ', $0, @ARGV ) );
$Command->r( parseoptions() );

if( $Command->r & $Options->{'exec'} ) {
    # Generate string
    my $plaintext1 = shift @ARGV;
    my $hashedtext = '';
    my $saltstring = '';
    my $partofsalt = '';
    my $saltsource = [ 0..9, 'A'..'Z', 'a'..'z' ];
    my $saltidlist = {
        'MD5'       => 1,
        'SHA256'    => 5,
        'SHA512'    => 6,
    };
    while(1) {
        last if length $saltstring == 8;
        $saltstring .= $saltsource->[ int(rand(scalar(@$saltsource) - 1)) ];
    }
    $partofsalt .= sprintf( "%s%d%s", '$', $saltidlist->{ $Setting->{'algorithm'} }, '$' );
    $partofsalt .= $saltstring;

    $Command->p( 'Algorithm = '.$Setting->{'algorithm'}, 1 );
    $Command->p( 'Plain text = '.$plaintext1, 1 );
    $Command->p( 'Salt string = '.$saltstring, 1 );

    if( $Setting->{'algorithm'} eq 'MD5' ) {
        $hashedtext = Crypt::Passwd::XS::unix_md5_crypt( $plaintext1, $saltstring );
    } elsif( $Setting->{'algorithm'} eq 'SHA256' ) {
        $hashedtext = Crypt::Passwd::XS::unix_sha256_crypt( $plaintext1, $saltstring );
    } elsif( $Setting->{'algorithm'} eq 'SHA512' ) {
        $hashedtext = Crypt::Passwd::XS::unix_sha512_crypt( $plaintext1, $saltstring );
    }

    printf( "%s\n", $hashedtext );

} else {
    help();
    exit(1);
}
sub parseoptions {
    my $r = 0;      # Run mode value
    my $p = {};     # Parsed options
    my $o = [ 
        'algorithm|a=s'
    ];

    Getopt::Long::GetOptions( $p, @$o, 'verbose|v+',
        'help'      => sub { help(); exit 0; },
        'version'   => sub { printf( STDERR "%s\n", $Version ); exit 0; },
    );

    if( $p->{'algorithm'} ) {
        if( grep { uc( $p->{'algorithm'} ) eq $_ } ( 'MD5', 'SHA256', 'SHA512' ) ) {
            $Setting->{'algorithm'} = uc $p->{'algorithm'};
        } 
    }
    $Setting->{'algorithm'} ||= 'SHA512';

    $Setting = $Default unless keys %$Setting;
    $r |= $Options->{'exec'};

    $Command->v( $p->{'verbose'} );
    $Command->p( sprintf( "Debug level = %d", $Command->v ), 1 );
    $Command->p( sprintf( "Run mode = %d", $r ), 1 );
    return $r;
}

sub help {
    printf( STDERR "%s [OPTIONS] plain-text \n", $0 );
    printf( STDERR "  -a, --algorithm <v> : Algorithm: MD5, SHA256, SHA512(default)\n" );
    printf( STDERR "\n" );
    printf( STDERR '  --help              : Help screen'."\n" );
    printf( STDERR '  --version           : Print the version number'."\n" );
    printf( STDERR '  -v, --verbose       : Verbose mode'."\n" );
    printf( STDERR '  --cpanm             : Find or download cpanm command'."\n" );
    printf( STDERR '  --modules           : Print required perl module list'."\n" );
    printf( STDERR "\n" );
}

